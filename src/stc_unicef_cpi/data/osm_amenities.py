# -*- coding: utf-8 -*-
"""OSM_amenities.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17HgSvL7KuLY3UQQ02_2exlBKZ-AMsDo_
"""

# pip install overpy
# pip install h3
# pip install pyproj

import numpy as np
import pandas as pd
import overpy
import time
import h3

# import seaborn as sns
# from shapely.geometry import Point
# from shapely.geometry.polygon import Polygon
# import h3

# from shapely import wkt
# from pyproj import Geod


import tqdm
from tqdm.auto import tqdm  # for notebooks

tqdm.pandas()


nga_hex = pd.read_table('nga_hex_tab.csv', sep='\t')
print('There are '+str(nga_hex.shape[0])+' hexagons')

"""# Amenities"""

def get_amenities():
  """Extract information about amenities (school, hospital, pharmacy, drinking water) with gps coordinates
  
  :returns: pandas dataframe
  """

  # Create query to pass to Overpass API
  api = overpy.Overpass()
  r = api.query("""
  area["name"~"Nigeria"];
  (
    node(area)["amenity"~"school|hospital|pharmacy|drinking_water"];
  );
  out;
  """)

  # Save in dataframe latitude, longitude and the type of amenity extracted by the query
  amenities = pd.DataFrame()
  amenities['Latitude'] = [float(node.lat) for node in r.nodes]
  amenities['Longitude'] = [float(node.lon) for node in r.nodes]
  amenities['Amenity_type'] = [node.tags['amenity'] for node in r.nodes]
  # amenities['Country'] = [node.tags[''] for node in r.nodes]

  # amenities['gps_coord'] = amenities.apply(lambda x: Point(x['Latitude'], x['Longitude']), axis=1)

  print(amenities.Amenity_type.unique())
  return amenities

def add_amenities_to_df(amenities, nga_hex, resolution=7):
  """Assign amenity to respective cluster of hexagonal grid (built with h3) with resolution.
  :param amenities: amenities extracted by Open Street Map
  :type amenities: pandas dataframe
  :param nga_hex: amenities extracted by Open Street Map
  :type nga_hex: pandas dataframe  
  :param resolution: resolution of the hexagonal grid built with h3
  :type resolution: int 
  :returns: pandas dataframe
  """
  # assign each amenity to its hexagon 
  amenities['cluster_id'] = amenities.progress_apply(lambda x: h3.geo_to_h3(x['Latitude'],	x['Longitude'], resolution), axis=1)

  # get the number of amenities in each cluster
  amenities_per_cluster = amenities.groupby(['cluster_id', 'Amenity_type'])['Latitude'].count().reset_index()
  amenities_per_cluster.rename(columns={'Latitude':'Count_amenity'}, inplace=True)

  # join the number of amenities per cluster with the grid dataframe
  for s in ['hospital', 'school', 'pharmacy', 'drinking_water']:
    df = amenities_per_cluster[amenities_per_cluster.Amenity_type==str(s)][['cluster_id', 'Count_amenity']]
    df.rename(columns={'Count_amenity':str('Count_'+s)}, inplace=True)
    nga_hex = pd.merge(nga_hex, df, how='left', left_on='hex_id', right_on='cluster_id')
    nga_hex.drop('cluster_id', axis=1, inplace=True)
    nga_hex[str('Count_'+s)].fillna(0, inplace=True)
    print(nga_hex.shape)

  return nga_hex

amenities = get_amenities()

nga_hex = add_amenities_to_df(amenities, nga_hex, resolution=7)

nga_hex['Count_school'].describe()

sum(nga_hex['Count_school'])

nga_hex.head()